import inspect
from abc import ABC, abstractmethod
from turtle import position
from homework5 import IoC


class Command(ABC):
    @abstractmethod
    def Execute(self) -> None:
        pass


class Movable(ABC):
    @abstractmethod
    def GetPosition(self) -> list[int]:
        pass

    @abstractmethod
    def GetVelocity(self) -> list[int]:
        pass

    @abstractmethod
    def SetPosition(self, position: list[int]) -> None:
        pass


class ObjectProperty(ABC):
    @abstractmethod
    def GetProperty(key: str) -> object:
        pass

    @abstractmethod
    def SetProperty(key: str, value: object) -> None:
        pass


def GenerateAdapter(movable: Movable, object: ObjectProperty) -> Movable:
    methodDictionary = {}
    methodDictionary["object"] = object
    methods = inspect.getmembers(movable, predicate=inspect.isfunction)
    for method in methods:
        name = str(method[0])
        if name.startswith("Get"):
            IoC.Resolve(None, "IoC.Register", name, lambda object, name=name: object.GetProperty(name[3:]))
            methodDictionary[name] = lambda self, name=name : IoC.Resolve(list, name, self.object)
        elif name.startswith("Set"):
            IoC.Resolve(None, "IoC.Register", name, lambda object, value, name=name: object.SetProperty(name[3:], value))
            methodDictionary[name] = lambda self, value, name=name : IoC.Resolve(None, name, self.object, value)

    Adapter = type("MovableAdapter", (Movable, ), methodDictionary)
    return Adapter()


""" 
    #
    #Testing code
    #
    class MyObject(ObjectProperty):
    def __init__(self, position: list[int], velocity: list[int]) -> None:
        super().__init__()
        self.position = position
        self.velocity = velocity

    def GetProperty(self, key: str) -> object:
        if key == 'Position':
            return self.position
        elif key == 'Velocity':
            return self.velocity
        else:
            raise AttributeError("Non-existent key in GetProperty method: key=%s", key)

    def SetProperty(self, key: str, value: object) -> None:
        if key == 'Position':
            try:
                self.position = value
            except:
                raise AttributeError("Wrong data in SetProperty method: key=%s, value=%s", (key, value))
        else:
            raise AttributeError("Non-existent key in SetProperty method: key=%s", key)


if __name__ == '__main__':
    obj = MyObject(position=[1, 1], velocity=[2, 2])
    IoC.Resolve(Command, "IoC.Register", "Adapter", GenerateAdapter)
    autoGenerated = IoC.Resolve(Movable, "Adapter", Movable, obj)

    print(obj.GetProperty("Position"))
    print(obj.GetProperty("Velocity"))
    print(autoGenerated.GetPosition())
    print(autoGenerated.GetVelocity())
    autoGenerated.SetPosition([3, 4])
    print(autoGenerated.GetPosition())
    print(autoGenerated.GetVelocity())
    print(obj.position) """